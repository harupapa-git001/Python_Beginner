Python入門

Pythonとは素早く効果的にシステムを開発できるように作られた汎用プログラミング言語

Pyhonで何ができるか

・本格的なWebサービスの開発(掲示板やSNS)
・機械学習・AI、化学計算、統計解析

採用例
・Google(C++, JAVAと併せてGoogle3大言語として採用されている)
・YouTube
・Instagram
・Dropboxなど

Pythonの特徴

スクリプト言語で開発がしやすい
さまざまなライブラリがある
・機械学習
・ビッグデータ解析
誰が書いても、同じような書き方になる



コーディングから学ぶ技術と使用例

print("<h1>hello world</h1>") → h1は見出しなのでタグを閉じると改行される

print"<p>世界の皆さん、") → print関数もテキスト形式では改行される
print("<b>こんにちは</></p>")

print("<h1>hello world</h1>", "<p>世界の皆さん、", "<b>こんにちは</b></p>")

print("<h1>hello world</h1>", end = "%")
print("<p>世界の皆さん、", end = "%")
print("<b>こんにちは</b></p>", end = "%")→ 行末に % がついて区切られる(改行したくないときは end = "")


変数を使うと同じ部分を別のデータに変更する時に簡単に修正できる(一時的にデータを格納するメリットを考える)

point = 100
print("テストの点数が" + str(point) + "点だった")

print関数の中ではデータの型を合わせる必要がある(上記はstring型なのでpointに格納されたint型の100を文字列にする必要がある = str(point) )

import random

point =  random.randint(1,100) → 1から100までの数字をランダムに生成し、変数pointに代入

データ型を意識しないと下記のようになる
a = "100"
b = "30"
print(a + b) → 期待する結果が130の場合そうならない
print("100" + "30")なので、130の出力のためには print(int(a) + int(b)) とする必要がある


実際の開発で役立つ情報

コメントを使って自分がしたいことのフローを書いてからコーディングする

条件分岐などたくさんの出力パターンが見込まれるときは入力変数の値と出力結果の値が見られるようにprint文をデバッグするために割り当てておくと開発効率が良い

西暦を和暦に変換する時には、各元号の元年(1年)が割り当てられた年を西暦から引いて出す。 例: 平成1年(1989)→ 1988を引くと1

ドット絵(リストで2次元配列のドットを0,1指定して読み込み判定し、ドットの絵を割り当てる)やマップ(ドット絵の要領でマップ全体を1種類の要素で埋め、配列指定で新しい要素を置換、必要な要素を条件分岐で置換)などは for文で2次元や3次元データとして扱うとよい


カウンタ変数の範囲

for i in range(8): → iの範囲は0から7まで
for i in range(5, 10): → iの範囲は5から9まで

import random
for i in random.randomint(1,10): → iの範囲は1から10まで




while文

if文とfor文にはなかったカウンタ変数の初期化(while文の直前)とカウンタ変数の更新(while文内)が必要

i = 1

while i <= 10:
    print(i) → iの範囲は1(初期化)から10(条件)
    i += 1 → 最後のiは11を保持(条件不一致で終了) ※カウンタ変数の更新を忘れると無限ループになる




input関数の特徴

1行ずつの読み込みとなるため、複数行の読み込みは複数回の呼び出しが必要になる → 読み込むデータがあらかじめ分かっている場合は初回にfor文で呼び出す回数のinput関数を使用して2行目以降はfor文でループするとよい

count = int(input()) → int変換
print(str(count) + "回実行する")
for i in range(count):
    name = input().rstrip() → .rstrip()はデータの行末を削除する命令(空白や変なデータが残るとエラーの原因となる)
    print(name + "はプログラミングの勉強をしている") → count回入力されるデータが名前の場合count分のループ処理




リストとは

リストとはデータ構造の一種でまとまったデータを扱う(配列ともいう)

リストはindexで管理される(indexは0から始まる) → print(index[0]) indexの0番を表示

リストはソートや並び順が必要なデータで扱える他、Webフォームの選択肢やエクセルのような複数行のデータでも使える





リストの特徴とデータの扱い

リストは文字列と数値を扱うことができる

name = "Cさん"

list = ["Aさん", "Bさん", 30, name] → 変数の指定もできる(name には "Cさん"が入る)

index[0] が "Aさん" 以下 index[3] までこのlistにはデータがある

indexは数値型なので計算ができる = 取り出すデータの番号を指定できる

リストの要素数(中身の数)は len関数 len() で分かる = print(len(list)) の場合は上記の要素数は 4

リストに要素を追加するときは .append関数を使う 例: listに "Dさん" を追加したいとき list.append("Dさん") → 要素数は 5に増える

リストから要素を削除したいときは .pop関数を使う 例: list.pop(2) → 30が削除される ※配列のindexではないので[ ]ではなく( )で要素を指定 = 関数は全て( )で囲み、その中で引数(外から関数内に持ち込みたいデータと戻り値)が必要な場合は指定する

for文でリストを使うと全ての要素が取り出せる

for i in list:
    print(i)

出力結果:
"Aさん"
"Bさん"
"Cさん" → 先ほど .pop(2)で 30 が削除されていているのでその場所には list[3]にいた name (つまり "Cさん")がつめて入る
"Dさん"

上記はprint()での表示なので end = "" 指定がなければ要素数が1行ずつ取り出される

また、カウント変数 i は listの中身が参照されるので、listのデータ型 string(文字列)が格納されるため print()内でのstr()指定は必要ない




.split()によるリストの分割

list = input().rstrip() によってinput関数1行で入力された複数のデータ( .rstrip() により行末の改行を削除)があった場合

上記listは .split() によってリスト化しさらに分割できます

例:

入力時には Aさん,Bさん,Cさん,Dさん　というデータ → listの中身["Aさん", "Bさん", "Cさん", "Dさん"]にしたい場合

list = input().rstrip().split(",") とすることで カンマ ( , ) によって区切られ分割されリスト化されます

上記はキーボード入力のパターン

下記はテキストデータから読み取りパターン


#line = input("カンマ , で区切って複数の所在地を入力してください:").split(",")
#上がキーボード入力(入力時のコメントつき)

#下がファイルから読み取り(自動出力) data.txtに 東京都,神奈川県,埼玉県 というデータをカンマで区切って .pyファイルと同じ階層に入れる

※コマンドラインやターミナルのカレントディレクトリ(現在の場所が.pyや.txtと同じ階層にあるようにする) = 例: デスクトップに置いてある場合 cd ~/Desktop にしてから
 .py を実行 → 同じ階層の txt を 自動読み込み(f = open()設定後)

f = open('data.txt' , "r", encoding="UTF-8")
line = f.read().split(",") → この読み込むタイミングで .split(",")　によりリスト化
f.close() 

for i in line:
    print("Welcome " + i + "へ!")

出力結果:
Welcome 東京都へ!
Welcome 神奈川県へ!
Welcome 埼玉県へ!



辞書型

キーと値が対応していて、キーから値を取り出せる

辞書の使われ方

DBとやり取りするデータの処理(特に2次元データ)

APIとやりとりするデータの処理

dic = {"国語":70, "算数":80, "英語":78}
print(dic)
print(dic["国語"]) → キー指定できる

select = "英語" → 変数にキーを代入して
print(dic[select]) → 変数をキーとして使用できる

辞書の要素の追加

dic["理科"] = 92
print(dic) → {"国語":70, "算数":80, "英語":78, "理科":92}
print(len(dic)) → 4

辞書の要素の削除

del dic["国語"]
print(dic) → {"算数":80, "英語":78, "理科":92}
print(len(dic)) → 3

for kyouka in dic:
    print(kyouka) → 教科名
    if dic[kyouka] >= 70: → 値の比較
        print(str(dic[kyouka]) + "は合格点です") → dic[kyouka]はintなのでstrに型変換(キャストともいう)

for(kyouka, point) in dic.items(): → .items() でキーと値をそれぞれ変数として用意できる
    print(kyouka + "の点は" + str(point) + "です") → pointはintなのでstrにキャスト

出力結果:
算数
80は合格点です
英語
78は合格点です
理科
92は合格点です
算数の点は80です
英語の点は78です
理科の点は92点です



リストのソート(整列)

list = ["りんご", "バナナ", "オレンジ"]
print(list)

print(sorted(list))

出力結果:
["りんご", "バナナ", "オレンジ"] → listの要素
["りんご", "オレンジ", "バナナ"] → ソート結果(オレンジの前にりんごがあるのはUNICODEの順番となっているから)

print(sorted(list, reverse = True)) → ["バナナ", "オレンジ", "りんご"]

辞書のソート

dic = {"りんご":100, "バナナ":80, "オレンジ":150}
print(dic)
print(sorted(dic))
print(sorted(dic.items())) → .items()関数でキーと値を取り出す

出力結果:
{'りんご': 100, 'バナナ': 80, 'オレンジ': 150} → dicの要素
['りんご', 'オレンジ', 'バナナ'] → ソート結果(リスト化されている = 元の辞書のデータはそのまま)
[('りんご', 100), ('オレンジ', 150), ('バナナ', 80)] → ソート結果(タプル化されている = 元の辞書のデータはそのまま)



リストと辞書を使ってフォルダ内にあるイメージ画像を表示させる

まず自分で画像ファイルを用意してimgというフォルダを作成してその中に入れる(下記ではimg_itemにあるimg/apple.pngなど)

次にfname = "img/apple.png"　と変数fnameに画像のディレクトリを入れ下記コードの img = cv2.imread(fname, cv2.IMREAD_UNCHANGED)以下で表示させる

fnameをコメントアウトしてimg_itemにりんごの辞書を用意、list_itemにりんごのリストを用意、for文で出力させる

※コード下に注意事項をかいてあります

#以下コピペで動きます

import cv2

img_item = {
    "りんご":"img/apple.png",
    "バナナ":"img/banana.png",
    "オレンジ":"img/orange.png"
}

list_item = ["りんご", "オレンジ", "バナナ", "オレンジ", "オレンジ", "バナナ", "りんご"]
#fname = "img/apple.png" → .pyファイルと同階層ではない(imgフォルダが.pyファイルと同階層でその中にimg_itemの画像がある)

for item_name in list_item: #→ list_itemから要素を取得して辞書(img_item)のキーとして利用
    fname = img_item[item_name] #→ 値(画像のディレクトリ)をfnameとして変数に格納
    
    #下2行はHTMLとして出力する際の記述
    #print("<img src = '" + fname + "'>")
    #print(item_name + "<br>")
    
    #下4行が画像を読み込んで、表示させて、2秒間停止させて、消去する(全体の流れはlist_itemの順に2秒ごとに表示される)
    img = cv2.imread(fname, cv2.IMREAD_UNCHANGED)
    cv2.imshow("Image", img)
    cv2.waitKey(2000)
    cv2.destroyAllWindows()

#コピペここまで

ファイルツリー:
.py -- imgフォルダ
        |-- apple.png
        |-- banana.png
        |-- orange.png

注意事項:
実行時に必ずコマンドラインやターミナルのカレントディレクトリを.pyのある階層にcdコマンドで移動した状態で実行する




----------------ここまでブログ貼り付け済み---------------------

２次元リスト

2次元リストの使われ方

RPGマップ/写真やイラスト/ゲームの盤面/表形式データ/3DCGの空間座標など

2次元リストの作成

#以下コピペで動きます

fruit = ["りんご", "バナナ", "オレンジ"]
meat = ["牛肉", "豚肉", "鶏肉"]
vegetable = ["白菜", "きゅうり", "レタス"]

food = [fruit, meat, vegetable] #→ リスト(fruit,meat,vegetable)をリスト(food)の要素として指定できる
print(food)

#コピペここまで

出力結果:
[['りんご', 'バナナ', 'オレンジ'], ['牛肉', '豚肉', '鶏肉'], ['白菜', 'きゅうり', 'レタス']]


fruit のりんごは fruit[0] に対し food のりんごは food[0][0] となる(オレンジはfood[0][2]、きゅうりはfood[2][1])



2次元リストの操作

#以下コピペで動きます

food = [['りんご', 'バナナ', 'オレンジ'], ['牛肉', '豚肉', '鶏肉'], ['白菜', 'きゅうり', 'レタス']]
print(food[0][0])
print(food[0][2])
print(food[2][1])

print(len(food))


#要素の更新
food[0][0] = "ぶどう"
print(food)

print(len(food[0]))

#要素の追加
food.append("ライス")
print(food)
print(food[3])
print(food[3][0])

food.append(["カレーライス"])
print(food)
print(food[4][0])

food[4].append("カツカレー")
print(food) 

#要素の削除
del food[4][1]
print(food)

#文字にアクセス
print(food[4][0][2:]) #index[2]から表示
print(food[4][0][:1]) #index[1]から非表示
print(food[4][0][:-1]) #index[-1] → (末尾 - 1)文字非表示
print(food[4][0][-1:]) #index[-1] → (末尾 - 1)文字から表示


#コピペここまで

出力結果:
りんご
オレンジ
きゅうり
3
[['ぶどう', 'バナナ', 'オレンジ'], ['牛肉', '豚肉', '鶏肉'], ['白菜', 'きゅうり', 'レタス']]
3
[['ぶどう', 'バナナ', 'オレンジ'], ['牛肉', '豚肉', '鶏肉'], ['白菜', 'きゅうり', 'レタス'], 'ライス']
ライス
ラ
[['ぶどう', 'バナナ', 'オレンジ'], ['牛肉', '豚肉', '鶏肉'], ['白菜', 'きゅうり', 'レタス'], 'ライス', ['カレーライス']]
カレーライス
[['ぶどう', 'バナナ', 'オレンジ'], ['牛肉', '豚肉', '鶏肉'], ['白菜', 'きゅうり', 'レタス'], 'ライス', ['カレーライス', 'カツカレー']]
[['ぶどう', 'バナナ', 'オレンジ'], ['牛肉', '豚肉', '鶏肉'], ['白菜', 'きゅうり', 'レタス'], 'ライス', ['カレーライス']]
ーライス
カ
カレーライ
ス



リストの要素を取り出す時にindexを使う場合はenumerateを使う

#以下コピペで動きます

food = [['りんご', 'バナナ', 'オレンジ'], ['牛肉', '豚肉', '鶏肉'], ['白菜', 'きゅうり', 'レタス']]

for foodname in food:
    print("food内のリストを参照する")
    print(foodname)

for (i, foodname) in enumerate(food[0]):
    print("food[0]リストの要素をindexを使って参照する")
    print(str(i + 1) + "個の" + foodname + "が出てきた")

#コピペここまで

出力結果:
food内のリストを参照する
['りんご', 'バナナ', 'オレンジ']
food内のリストを参照する
['牛肉', '豚肉', '鶏肉']
food内のリストを参照する
['白菜', 'きゅうり', 'レタス']
food[0]リストの要素をindexを使って参照する
1個のりんごが出てきた
food[0]リストの要素をindexを使って参照する
2個のバナナが出てきた
food[0]リストの要素をindexを使って参照する
3個のオレンジが出てきた


2次元リストの作成

まずは内包表記の記述例について

#コピペで動きます

create_num1_list = [1 for i in range(10)] #forの前の1が初期値として与えられfor文がrange回実行される
print(create_num1_list)
print(len(create_num1_list))

create_num1_list = [i * 3 for i in range(10)]
print(create_num1_list)
print(len(create_num1_list))

#コピペここまで

出力結果:
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
10
[0, 3, 6, 9, 12, 15, 18, 21, 24, 27]
10


2次元リストを作成します

#コピペで動きます

list = [[1 for i in range(3)] for j in range(5)]
print(list)

list[3][0] = 0
print(list)

#コピペここまで

出力結果:
[[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
[[1, 1, 1], [1, 1, 1], [1, 1, 1], [0, 1, 1], [1, 1, 1]]

これにより i のリストが内側、 j のリストが外側なのが分かる

------------------ここまでGitHub push済---------------------
2.txtへ
