オブジェクトとは変数と関数をセットにしたもの(オブジェクト指向)

オブジェクトにまとめられている関数はメソットと呼ぶ

オブジェクトの使い方

クラスからオブジェクトを作って利用

クラス: オブジェクトの設計図

オブジェクト: クラスから生成する(インスタンスとも呼ばれる)



オブジェクトのメリット

・変数とメソットがセット(どの変数をどのメソッドで使っているか明確になりバグが出にくい)
・クラスとオブジェクトに分離されている(再利用しやすい/分類しやすい)

多数のライブラリやフレームワークがクラスをベースに作られている(オブジェクトの理解が不可欠)


クラスを作成する


#以下コピペで動きます

class Greeting: # クラス名の頭文字は大文字にするのが慣習(変数名と区別しやすい) コロン( : )のつけ忘れに注意

    def word(self): # メソッドの定義(selfについては下記にあります(クラス内で引数を定義する際にはselfという引数をとる)
        print("今日はいい天気ですね")

word1 = Greeting() # オブジェクトの作成(クラスを変数に割り当てる)
word1.word() # オブジェクトのメソッドの呼び出し
var = word1  # 変数にオブジェクトを代入することもできる
var.word()
Greeting().word() # クラスと関数をつなげてもメソッドとして機能している

#コピペここまで

出力結果:
今日はいい天気ですね
今日はいい天気ですね
今日はいい天気ですね

                     
#以下コピペで動きます

class Greeting: # クラス名の頭文字は大文字にするのが慣習(変数名と区別しやすい)

    def word(self): # メソッドの定義(selfについては下記にあります(クラス内で引数を定義する際にはselfという引数をとる)
        print("今日はいい天気ですね")

    def question(self, name):
        print(name + "、ごきげんいかがですか？")

word1 = Greeting() # オブジェクトの作成(クラスを変数に割り当てる)
word1.word() # オブジェクトのメソッドの呼び出し

word1.question("社長さん")

#コピペここまで

出力結果:
今日はいい天気ですね
社長さん、ごきげんいかがですか？

※ここから先を1度に実装する際には、いままでの基礎を押さえてからでないとハマる要因となります


変数をクラスで管理する

selfについて

インスタンス変数(下記self.motionでコメント記載)を使用する際に必要となる引数でクラス内にあるメソッドの第1引数にメソッドの呼び出しに使ったオブジェクト自身


#以下コピペで動きます

class Greeting: # クラス名の頭文字は大文字にするのが慣習(変数名と区別しやすい)
    def __init__(self, motion): # コンストラクタ(オブジェクト作成時最初に自動的に呼ばれる)の追加
        self.motion = motion # self.motionをインスタンス変数と呼ぶ(ローカル変数と違いオブジェクトがある限り値が保存される変数)

    def word(self): # メソッドの定義(selfについては下記にあります(クラス内で引数を定義する際にはselfという引数をとる)
        print("今日はいい天気ですね")

    def question(self):
        print(self.motion + "、ごきげんいかがですか？") # self.motionのselfはquestionの引数のselfではなく、__init__コンストラクタ内のインスタンス変数のself(self.motionのself)が対応している

word1 = Greeting("久しぶりですね") # オブジェクトの作成(クラスを変数に割り当てる)
word1.question() # オブジェクトのメソッドの呼び出し

word2 = Greeting("寒いですね")
word2.question()

list = []
list.append(Greeting("お早いですね")) # オブジェクトはリストにも代入できる
list.append(Greeting("最近見かけませんが"))
list.append(Greeting("顔色が良くないようですが"))

for talk in list:
    talk.question()

#コピペここまで

出力結果:
久しぶりですね、ごきげんいかがですか？
寒いですね、ごきげんいかがですか？
お早いですね、ごきげんいかがですか？
最近見かけませんが、ごきげんいかがですか？
顔色が良くないようですが、ごきげんいかがですか？


クラスで引数と戻り値のあるメソッドを作る

#以下コピペで動きます

class Item:
    def __init__(self, price, quantity):
        self.price = price
        self.quantity = quantity

    def total(self):
        return self.price * self.quantity
    
drink = Item(130, 3)
print("合計金額は:" + str(drink.total()) + "円です") # drinkオブジェクトのtotalメソッドを呼び出し

food = Item(180, 5)
total = food.total() # メソッドの戻り値は変数に代入できる
print("合計金額は:" + str(total) + "円です")

#コピペここまで

出力結果:
合計金額は:390円です
合計金額は:900円です


税率を追加する

#以下コピペで動きます

class Item:
    tax = 1.08 # クラス変数を使用する(すべてのオブジェクトで共通して利用できる)
    def __init__(self, price, quantity):
        self.price = price
        self.quantity = quantity

    def total(self):
        return int(self.price * self.quantity * Item.tax) #intは税率の計算で出る小数点切り捨て(クラス変数を参照するときはインスタンス変数と違って クラス名 + . + 変数名 で使用する)
    
drink = Item(130, 3)
print("合計金額は:" + str(drink.total()) + "円です") # drinkオブジェクトのtotalメソッドを呼び出し

food = Item(180, 5)
total = food.total() # メソッドの戻り値は変数に代入できる
print("合計金額は:" + str(total) + "円です")

#コピペここまで

出力結果:
合計金額は:421円です
合計金額は:972円です


文字列とリストのメソッドを使う

#以下コピペで動きます

text = "pYthon"
print(text)
print(text.capitalize()) # Pythonが用意しているメソッド
print(text.upper()) # Pythonが用意しているメソッド
print(text.lower())

name = "私,あなた,彼,彼女"

list = name.split(",")
print(list)

list.remove("あなた")
print(list)

list.append("社長")
print(list)

#コピペここまで

出力結果:
pYthon
Python
PYTHON
python
['私', 'あなた', '彼', '彼女']
['私', '彼', '彼女']
['私', '彼', '彼女', '社長']


アクセス制限を理解する

メソッド名の前にアンダーバー2つ ( __ ) をつけるとクラスの中でしか呼び出せないメソッドになる(プライベートメソッドと呼ぶ)

#以下コピペで動きます

class Greeting:
    def __init__(self, human, yesterday):
        self.human = human
        self.__yesterday = yesterday

    def work(self):
        print(self.human + "は道端を歩いていた")

    def __meet(self, pets):
        print(self.__yesterday + "は" + pets + "にであった。")

say = Greeting("私", "昨日")
say.work()

#say.__meet("猫") # コメントアウトを外すとプライベートメソッドの影響でエラーになる
#print(say.__yesterday) #プライベート変数(プライベートプロパティ)にしているのでクラスの外から呼び出せない

#コピペここまで

出力結果:
私は道端を歩いていた

クラスの外でしか呼び出せない変数をプライベート変数またはプライベートプロパティと呼ぶ

------------------ここまでGitHub push済---------------------
4.txtへ
