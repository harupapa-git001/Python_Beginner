関数とはコードを分割して再利用するための機能

大規模プログラムの開発で必要

関数の働き

・長いコードを分割して整理
・コードに名前をつけられる
・コードを何度でも呼び出せる
・コードを組み合わせられる

これらの働きにより見通しが良くなったり再利用できる

関数を作る

#以下コピペで動きます

def say_hello(): # → say_hello関数の定義
    print("hello world") # → 関数内のインデント

say_hello() # → hey_hello関数の呼び出し

say_hello()

#コピペここまで

出力結果:
hello world
hello world


関数名をつける際の慣習

1文字目: アルファベット(大文字は使わない)/アンダーバー( _ )
2文字目以降: アルファベット/アンダーバー( _ )/数字

何をするのか分かる名前をつける


引数と戻り値

#以下コピペで動きます

def culc(x, y): # → x, yの引数を定義
    print(x + y) # → culc関数内で使用(戻り値なし)

culc(100, 10) # → culc関数の呼び出し(引数の値を与える)

#コピペここまで

出力結果:
110

#以下コピペで動きます

def culc(x, y):
    return x + y # → 戻り値の定義(x + yの計算結果)

num = culc(100, 10) # → culc関数の呼び出しと戻り値を変数に格納(culc関数をそのまま呼び出すと変数に入れないと戻り値を扱えない → 下にprint関数内呼び出し方法があります)
print(num) # → 戻り値の表示

num1 = culc(50, 80) # → 複数の変数に戻り値を格納できる
print(num1)

print(culc(30, 70)) # → print関数内でculc関数を定義して戻り値をそのまま表示


#コピペここまで

出力結果:
110
130
100


関数の呼び出しでprint関数を使うと、値が存在しない場合はNone表示になるので注意

#以下コピペできます

# 九九の表を作成してみよう

def multiply(x, y):
    return x * y

def culc(self):
    for num in range(1, 10):
        print(multiply(self, num), end="")
        if num < 9:
            print(", ", end="")

print(culc(1))
print(culc(2))
print(culc(3))

#コピペここまで

出力結果:
1, 2, 3, 4, 5, 6, 7, 8, 9None
2, 4, 6, 8, 10, 12, 14, 16, 18None
3, 6, 9, 12, 15, 18, 21, 24, 27None

この問題を解決するために関数内にprint関数を入れ込みます

#以下コピペできます

def multiply(x, y):
    return x * y

def culc(self):
    for num in range(1, 10):
        print(multiply(self, num), end="")
        if num < 9:
            print(", ", end="")
    print()
    
for i in range(1, 10):
    culc(i)

#コピペここまで

出力結果:
1, 2, 3, 4, 5, 6, 7, 8, 9
2, 4, 6, 8, 10, 12, 14, 16, 18
3, 6, 9, 12, 15, 18, 21, 24, 27
4, 8, 12, 16, 20, 24, 28, 32, 36
5, 10, 15, 20, 25, 30, 35, 40, 45
6, 12, 18, 24, 30, 36, 42, 48, 54
7, 14, 21, 28, 35, 42, 49, 56, 63
8, 16, 24, 32, 40, 48, 56, 64, 72
9, 18, 27, 36, 45, 54, 63, 72, 81


スコープ(変数の範囲)

