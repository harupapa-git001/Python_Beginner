関数とはコードを分割して再利用するための機能

大規模プログラムの開発で必要

関数の働き

・長いコードを分割して整理
・コードに名前をつけられる
・コードを何度でも呼び出せる
・コードを組み合わせられる

これらの働きにより見通しが良くなったり再利用できる

関数を作る

#以下コピペで動きます

def say_hello(): # → say_hello関数の定義
    print("hello world") # → 関数内のインデント

say_hello() # → hey_hello関数の呼び出し

say_hello()

#コピペここまで

出力結果:
hello world
hello world


関数名をつける際の慣習

1文字目: アルファベット(大文字は使わない)/アンダーバー( _ )
2文字目以降: アルファベット/アンダーバー( _ )/数字

何をするのか分かる名前をつける


引数と戻り値

#以下コピペで動きます

def culc(x, y): # → x, yの引数を定義
    print(x + y) # → culc関数内で使用(戻り値なし)

culc(100, 10) # → culc関数の呼び出し(引数の値を与える)

#コピペここまで

出力結果:
110

#以下コピペで動きます

def culc(x, y):
    return x + y # → 戻り値の定義(x + yの計算結果)

num = culc(100, 10) # → culc関数の呼び出しと戻り値を変数に格納(culc関数をそのまま呼び出すと変数に入れないと戻り値を扱えない → 下にprint関数内呼び出し方法があります)
print(num) # → 戻り値の表示

num1 = culc(50, 80) # → 複数の変数に戻り値を格納できる
print(num1)

print(culc(30, 70)) # → print関数内でculc関数を定義して戻り値をそのまま表示


#コピペここまで

出力結果:
110
130
100

None値の削除

関数の呼び出しでprint関数を使うと、値が存在しない場合はNone表示になるので注意

#以下コピペできます

# 九九の表を作成してみよう

def multiply(x, y):
    return x * y

def culc(self):
    for num in range(1, 10):
        print(multiply(self, num), end="")
        if num < 9:
            print(", ", end="")

print(culc(1))
print(culc(2))
print(culc(3))

#コピペここまで

出力結果:
1, 2, 3, 4, 5, 6, 7, 8, 9None
2, 4, 6, 8, 10, 12, 14, 16, 18None
3, 6, 9, 12, 15, 18, 21, 24, 27None

この問題を解決するために関数内にprint関数を入れ込みます

#以下コピペできます

def multiply(x, y):
    return x * y

def culc(self):
    for num in range(1, 10):
        print(multiply(self, num), end="")
        if num < 9:
            print(", ", end="")
    print()
    
for i in range(1, 10):
    culc(i)

#コピペここまで

出力結果:
1, 2, 3, 4, 5, 6, 7, 8, 9
2, 4, 6, 8, 10, 12, 14, 16, 18
3, 6, 9, 12, 15, 18, 21, 24, 27
4, 8, 12, 16, 20, 24, 28, 32, 36
5, 10, 15, 20, 25, 30, 35, 40, 45
6, 12, 18, 24, 30, 36, 42, 48, 54
7, 14, 21, 28, 35, 42, 49, 56, 63
8, 16, 24, 32, 40, 48, 56, 64, 72
9, 18, 27, 36, 45, 54, 63, 72, 81


スコープ(変数の範囲)

変数にはローカル変数とグローバル変数がありローカル変数は範囲があるがグローバル変数はどこでも使える

#以下コピペで動きます

string = "hello" # → グローバル変数

a = 1 #グローバル変数
b = 3 #グローバル変数

def culc(x , y):
    a = 5 # ローカル変数(コメントアウトするとグローバル変数aの値が下のprint関数で使われる)


    #string += "greeting" # stringの前の#を外し、下の global string以下2行をコメントアウトするとエラーになる
                          # (グローバル変数は関数からは参照だけで代入や変更不可)

    global string # グローバル変数に変更を加える場合はglobalをつける
    string += "greeting" #グローバル変数に変更が可能となった
    #global string += "greeting" のように定義と代入を同時にできない
    
    print(string + ":" + str(a)) # 上のローカル変数が定義されているので関数内はaの値は初期値5
    
    return x + y

add = culc(a, b) # グローバル変数の値が関数で使われ計算結果が戻り値で返される
print(add)
print(string + ":" + str(a)) # 関数内でローカル変数に値が代入されたがグローバル変数に影響がない

#コピペここまで

出力結果:
hellogreeting:5
4
hellogreeting:1

#グローバル変数を関数内で無効にすると下の結果になる
hello:5
4
hello:1


引数のデフォルト値


#以下コピペで動きます

string = "数値"

def culc(sum, num = 0):
    print(string + "は" + str(num) + "です" + str(sum))

#culc(num = 3, "合計は？") # 関数の引数と呼び出しの両方にルールがあり、デフォルト値のあとにデフォルト値のない引数は定義できない
culc("合計は？", num = 3) # こちらはOK 関数の引数(num = 0, sum)にしてみてもエラーが出ることを確認しておきたい

culc("合計は？") #　引数numが設定されていないのでデフォルト値が適用される(下記キーワード引数も参照)
culc("合計は?", "5") # 引数の定義の順で適用される

#コピペここまで


出力結果:
数値は3です合計は？
数値は0です合計は？
数値は5です合計は?


可変長引数

#以下コピペで動きます

def playername(greeting, *name):
    for i in name:
        print("私は" + i + "です。" + greeting)

playername("よろしくおねがいします。", "社長", "部長", "平社員") # 第一引数は挨拶(greeting), 第二引数以降は *name 

#コピペここまで

出力結果:
私は社長です。よろしくおねがいします。
私は部長です。よろしくおねがいします。
私は平社員です。よろしくおねがいします。


可変長引数に辞書を使用する(辞書の中身は引数で与えられた順番で表示されるとは限らない)


#以下コピペで動きます

def playername(**player):
    for name, greeting in player.items():
        print("私は" + name + "です。" + greeting)
    print(player)

playername(president = "よろしくお願いいたします", manager = "よろしくです", employee = "ちゃーす")

#コピペここまで

出力結果:
私はpresidentです。よろしくお願いいたします
私はmanagerです。よろしくです
私はemployeeです。ちゃーす
{'president': 'よろしくお願いいたします', 'manager': 'よろしくです', 'employee': 'ちゃーす'}


キーワード引数

関数の引数にラベルをつけることができる機能(定義してある引数を指定して省略する際に使用できる)

#以下コピペで動きます

def word(gr = "おはようございます", tg = "世界の皆さん"):
    print(gr + "、" + tg)

word()
word("こんにちは", "みなさん")
word("こんばんは")

word(gr = "こんにちは", tg = "みなさん") # キーワード引数
word(tg = "社長", gr = "おはようございます") #順番の入れ替えも出来る
word(tg = "") # tg(第二引数の省略)

#コピペここまで

出力結果:
おはようございます、世界の皆さん
こんにちは、みなさん
こんばんは、世界の皆さん
こんにちは、みなさん
おはようございます、社長
おはようございます、

------------------ここまでGitHub push済---------------------
3.txtへ

