プログラミングとはコンピュータを制御するプログラムを作ること

ソースコード:プログラムの記述(コンピュータで処理できる専用の言語で記述)
プログラミング言語:ソースコードを記述する専門用語

プログラミング言語Pythonの特徴(スクリプト言語)

・すばやく効果的にシステムを開発できる
・誰が書いても、同じような書き方になる
・さまざまな分野のライブラリが公開されている
・統計処理・人工知能などの分野で注目を集める

命令語で記述 例:print() = データを表示する命令、プログラムではこのような命令を使ってコンピュータの動作を指示

print()は関数、かっこ内で引数を渡している 例:print("Hello World") = 文字を指定する場合は""ではさむ(日本語も可能)

""で囲まれたデータを文字列という



間違いやすいポイント

文字間違い = printt() 色が変わる NameError: name 'printt' is not defined

大文字と小文字の間違い = Print() NameError: name 'Print' is not defined

""つけ忘れ = print("Hello world) SyntaxError: EOL while scanning string literal

文字列以外の全角入力 = print("Hello world"）<）が全角> SyntaxError: invalid character in identifier



コメントを使う(プログラムをコメントで無効にすることをコメントアウトともいう)

#を先頭につけるとその行のメッセージはプログラムと認識しない
複数行のコメントは""" と """でかこむ
文字列""のかっこの間に#を書いてもコメントとはならず文字列として表示される

コメントは人間が理解しやすいように書く




数値を扱う

print("100")は100という文字列 → print("100 + 30") → 100 + 30という文字の出力

print(100)は100という数値データ(数値同士の計算が可能) 例:print(100 + 30)→ 130


プログラムで計算(四則演算または代入演算子という)

足し算 +
引き算 -
掛け算 *
割り算 /

剰余 % (割り算した余り)

print(100 + 30) → 130
print(100 - 30) → 70
print(100 * 30) → 3000
print(100 / 30) → 3.3333333333333335

複数の計算が可能(優先順位がある)

() * / + - の順に優先

print(100 + 30 * 2) → 100 + 60
print((100 + 30) * 2) → 130 * 2




変数にデータを入れる[データ型には数値と文字列があり、文字列には""をつける]

変数はデータを入れる入れ物で名前をつけられる

greeting = "Hello world" 変数greetingにHello worldが入った(代入という)

print(greeting)で変数greetingの中身 Hello world が表示可能

print(greeting)を2行書くと Hello world が2行表示される


(ローカル)変数名の付け方にはルールや慣習がある

1文字目
・アルファベットで書く
・アンダーバー　( _ )

2文字目
・アルファベット
・アンダーバー
・数字

関数名なども使えない
・print

慣習
・日本語(全角)で書かない
・全て小文字にする(Pythonの慣習では大文字は定数)

正しい変数名の例

・greeting
・number1
・player_name

使えない変数名
・Greeting(先頭が大文字)
・1number(先頭が数字)
・player-name(ハイフンを使用している)

文字列と変数は連結が可能

name = "You"
print(name + "さん、ようこそ") → Youさん、ようこそ



データの受け取り

入力(標準入力)を使う時はinput関数を使う 例: name = input() → 変数nameにキーボードからの入力を代入(文字列扱い)

number = int(input()) → input関数で受け取った数字の文字列データが整数として変数numberに代入される(数値の計算が可能) 例: numberに12を入れた時のprint(number * 10) → 120

文字列と連結する場合はstr()を使う 例: numberに12を入れた時のprint("おこづかいは" + str(number * 10) + "円") → おこづかいは120円


input関数は入力データを1行ずつしか受け取れない(2行の入力データを受け取るときは2回記述が必要)

例: 入力データが 今日 と 明日 の場合 1回目のinput()で 今日 が受け取られる
message = input()
print(message) → 今日

もう一度input()で受け取ると 明日 が受け取られる(変数messageの中身は 今日 から 明日 に書き換えられる)
message = input()
print(message) → 明日


標準入力と標準出力

プログラムがデータを入出力する先

キーボード、ファイル、コマンド[標準入力] → ディスプレイ[標準出力]、ファイル[標準エラー出力]、コマンド[標準エラー出力]

入力元と出力先は指定できる



条件指定の方法[if, for, while]

if文

if name == "python":
    print("Welcome") → 入力変数 name が python の時 == (等しい)のであれば"Welcome"を表示

if文の後ろにある式を条件式という
if文の行の最後にコロン( : )をつける
if文の中身はインデント(字下げ)をする Pythonの慣習として半角スペース4文字分の字下げをする
インデントされた最初から最後までの範囲をブロックと呼びひとかたまりとして扱う

比較演算子の種類(等しいか等しくないか判定する)

a == b(等しい) a != b(等しくない) → a = b(aにbを代入する) ( = )とは違うので注意( == )
a > b(aはbより大きい) a < b(aはbより小さい) → bは含まない
a >= b(aはb以上) a <= b(aはb以下) → bは含む



条件に合わせて処理を変える

if name == "python":
    print("Welcome")

elif name == "PYTHON":
    print("Good morning")

else:
    print("Goodbye")

変数 name がもし pythonと等しければ Welcome、もし PYTHONと等しければ Good morning、それ以外なら Goodbyeを表示

elif の条件はいくつも追加できる


これにより文字列や数値を判定条件にしてデータを分類することができるようになる



同じ条件を繰り返す

for文

greeting == "Hello world"

for i in range(3):
    print(greeting) → Hello worldを3回(range(3)で指定)表示する

変数 i には初期値として0が割り当てられるので、3回繰り返す時の数値は0,1,2となる


複数のデータを受け取る

greeting = "Hello world"
count = int(input())

for i in range(count):
    print(greeting)

標準入力で得た文字列の数値をint変換して変数countに代入、countの回数だけiを繰り返しgreetingの中身を表示

count = int(input())

for i in range(count):
    name = input()
    print("Hello " + name)

入力値が 2 と You と Python とあり、初回の入力 2 は変数countに割り当てられ、その回数分iを繰り返し、for文の中で変数nameを入力値 You と Python を受け取り、それぞれ Hello You と Hello Pythonと表示

上記はあらかじめデータの数がわかっている時に繰り返し回数を入力値として指定できる点に注目


While文については入門編で記載します。以上が基本的なルールや慣習、そしてコーディングの技術となります
